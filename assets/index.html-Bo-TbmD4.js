import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,c as n,a as e,d as l,w as o,b as s,o as r,e as c}from"./app-DURi48zK.js";const d={},p=e("h1",{id:"原型模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#原型模式"},[e("span",null,"原型模式")])],-1),h=s('<p>原型模式，就是根据已有的对象创建出新的一个对象。它适用于创建对象特别昂贵的情况，比如有的对象创建过程需要重新数据库，那么这个对象的创建过程可以说是昂贵的过程。可以利用原型模式来创建。</p><p>在Java语言中，原型模式的实现，可以简单理解为实现clone函数。我们知道在Java语言中，clone是对象的复制，这正好切合了原型模式的含义。</p><h2 id="浅拷贝与深拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝与深拷贝"><span>浅拷贝与深拷贝</span></a></h2><p>对象的复制，由两种复制模式，浅拷贝和深拷贝。下面以Java对象为例，说明浅拷贝与深拷贝。</p><h3 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝"><span>浅拷贝</span></a></h3><p>浅拷贝，如果是基本类型或String类型，浅拷贝会复制源对象的值到目标对象中，如果是引用类型，会复制引用的地址。源对象的引用类型的属性和目标对象里引用类型是同一个。</p><p>典型的浅拷贝就是BeanUtils工具。一般情况下，使用浅拷贝即可。</p><h3 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝"><span>深拷贝</span></a></h3><p>深拷贝，和浅拷贝不同的地方在于引用类型的拷贝方式。深拷贝对引用类型里所有的值全部复制一遍创建一个新的引用类型，这两个的地址是不同的，是可以独自变化的。如果引用类型里嵌套了引用类型，那么也是一样全部复制。</p><p>深拷贝的实现，一般是通过源对象序列化，目标对象反序列化。也可以将引用类型一级一级递归的调用浅拷贝生成，这样的话代码就比较复杂不推荐。</p><p>深拷贝一般可以使用工具类：SerializationUtils</p><blockquote><p>注意：final修饰的关键字不允许被拷贝。</p></blockquote>',12);function m(u,_){const a=i("RouteLink");return r(),n("div",null,[p,e("p",null,[l(a,{to:"/gof/builder/"},{default:o(()=>[c("创建者模式")]),_:1})]),h])}const v=t(d,[["render",m],["__file","index.html.vue"]]),x=JSON.parse('{"path":"/article/h5uvsk8m/","title":"原型模式","lang":"zh-CN","frontmatter":{"title":"原型模式","createTime":"2024/08/25 10:22:46","permalink":"/article/h5uvsk8m/"},"headers":[{"level":2,"title":"浅拷贝与深拷贝","slug":"浅拷贝与深拷贝","link":"#浅拷贝与深拷贝","children":[{"level":3,"title":"浅拷贝","slug":"浅拷贝","link":"#浅拷贝","children":[]},{"level":3,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[]}]}],"git":{"createdTime":1724591575000,"updatedTime":1724591575000,"contributors":[{"name":"weiyiysw","email":"weiyiysw37@gmail.com","commits":1}]},"readingTime":{"minutes":1.64,"words":491},"filePathRelative":"gof/builder/prototype-mode.md","localizedDate":"2024年8月25日"}');export{v as comp,x as data};
