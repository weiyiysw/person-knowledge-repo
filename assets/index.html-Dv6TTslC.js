import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,c as r,a,d as o,w as s,b as n,o as c,e as d}from"./app-BVzTyLOJ.js";const m={};function p(h,e){const t=l("RouteLink");return c(),r("div",null,[e[1]||(e[1]=a("h1",{id:"装饰器模式",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#装饰器模式"},[a("span",null,"装饰器模式")])],-1)),a("p",null,[o(t,{to:"/gof/structure/"},{default:s(()=>e[0]||(e[0]=[d("结构型模式")])),_:1})]),e[2]||(e[2]=n('<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>装饰器模式定义是允许给一个现有的对象增加新功能，而不改变其结构。顾名思义，装饰在这里就是指增加新功能。举例来说，当你买了一套毛坯房，一般来讲都不会直接入住。你会先搞硬装软装，比如铺地板或瓷砖、打柜子，买沙发、买电器等等。等到最后装修完成，你才会入住。这时候装修完成后的房子和之前的毛坯房，其实本质都是房子。其类结构，以Mybatis里的cache接口来说明：</p><img src="https://www.plantuml.com/plantuml/svg/ROv12W8n34NtEKMMkl42Wp3WreLNY9slKqXBQTALpDsjCoe8RiBd__SWexbKRqafPaUzIG2V9CmW2YfcV44jy2QwjXnJKIHajr_iNDj_W1_4xpH1SHV7GBqgxQenVBtTXeJNtQyEiy_H3X-9Zziuz6cXXKRagR_z1000" alt=""><ol><li>抽象构件：Cache</li><li>具体实现类：PerpetualCache</li><li>抽象装饰器类：Cache，在Mybatis将Cache设计为接口，使用decorator pattern时，省去了Decorator类</li><li>具体的装饰器类：LruCache，持有具体实现类的对象，并增加自己的功能。</li></ol><h2 id="装饰器模式的应用" tabindex="-1"><a class="header-anchor" href="#装饰器模式的应用"><span>装饰器模式的应用</span></a></h2><ol><li>在Java中，典型的装饰器模式就是IO流里的类。Java的IO流分为字节流和字符流。</li><li>Mybatis里的Cache</li></ol>',6))])}const _=i(m,[["render",p],["__file","index.html.vue"]]),x=JSON.parse('{"path":"/article/qce4cs47/","title":"decorator","lang":"zh-CN","frontmatter":{"title":"decorator","createTime":"2024/08/25 12:32:12","permalink":"/article/qce4cs47/"},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"装饰器模式的应用","slug":"装饰器模式的应用","link":"#装饰器模式的应用","children":[]}],"git":{"createdTime":1724591575000,"updatedTime":1724591575000,"contributors":[{"name":"weiyiysw","email":"weiyiysw37@gmail.com","commits":1}]},"readingTime":{"minutes":1.03,"words":310},"filePathRelative":"gof/structure/decorator.md","localizedDate":"2024年8月25日"}');export{_ as comp,x as data};
